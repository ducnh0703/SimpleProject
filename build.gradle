apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

version = '1.0.0'
sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.8.4'
        classpath 'org.postgresql:postgresql:42.2.10'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'io.vertx:vertx-web:3.8.5'
    compile 'org.jooq:jooq:3.8.4'
    annotationProcessor 'io.vertx:vertx-codegen:3.8.5:processor'
    annotationProcessor 'io.vertx:vertx-web-api-service:3.8.5'
    compile 'io.vertx:vertx-web-api-service:3.8.5'
    implementation 'org.postgresql:postgresql:42.2.10'
    implementation 'org.apache.logging.log4j:log4j-core:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'

    testImplementation("io.vertx:vertx-junit5:3.8.5'")
    testImplementation("io.vertx:vertx-web-client:3.8.5'")
    testImplementation("org.junit.jupiter:junit-jupiter-api:3.8.5'")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:3.8.5'")
}

application {
    mainClassName = "io.vertx.core.Launcher"
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes["Main-Verticle"] = "Vertx.Verticle"
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.8.0.xsd') {
            jdbc() {
                driver('org.postgresql.Driver')
                url('jdbc:postgresql://localhost:5432/Test')
                user('postgres')
                password('duc01285154091')
            }
            generator() {
                database() {
                }
                generate() {
                }
                target() {
                    packageName('Jooq')
                    directory('src/main/java')
                }
            }
        }

// Run the code generator
// ----------------------
//org.jooq.util.GenerationTool.generate(writer.toString())
